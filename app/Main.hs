{-# LANGUAGE DataKinds #-}

module Main where

import qualified AggregateSignature.Program.Keelung as Keelung
import qualified AggregateSignature.Program.Snarkl as Snarkl
import AggregateSignature.Util
import Control.Monad
import qualified Data.Set as Set
import Keelung (GF181)
import qualified Keelung
import qualified Snarkl

main :: IO ()
main = do 
  snarklConstraints
  keelungConstraints

-- for examing the number of constraints generated by Keelung
keelungConstraints :: IO ()
keelungConstraints = do
  let dimension = 128
  let numberOfSignatures = 4
  let settings =
        Settings
          { enableAggSigChecking = True,
            enableSigSizeChecking = True,
            enableSigLengthChecking = True
          }
  let setup = makeSetup dimension numberOfSignatures 42 settings :: Setup GF181
  let input = genInputFromSetup setup
  let result = Keelung.comp (Keelung.aggregateSignature setup)
  case result of
    Left err -> print err
    Right cs -> do
      putStrLn $ "Keelung / not optimised: " ++ show (Set.size (Keelung.csConstraints cs))
      let cs' = Keelung.optimise cs
      putStrLn $ "Keelung / optimised: " ++ show (Set.size (Keelung.csConstraints cs'))
      let cs'' = snd $ Keelung.optimiseWithInput input cs'
      putStrLn $ "Keelung / patially evaluated: " ++ show (Set.size (Keelung.csConstraints cs''))

-- for examing the number of constraints generated by Snarkl
snarklConstraints :: IO ()
snarklConstraints = do
  let dimension = 128
  let numberOfSignatures = 4
  let settings =
        Settings
          { enableAggSigChecking = True,
            enableSigSizeChecking = True,
            enableSigLengthChecking = True
          }
  let setup = makeSetup dimension numberOfSignatures 42 settings :: Setup GF181
  -- let input = genInputFromSetup setup
  
  let aggSig = Snarkl.aggregateSignature setup
  let constraints =
        ( Snarkl.cs_constraints . snd
            . Snarkl.simplifyConstrantSystem False mempty
            . Snarkl.compile
            . Snarkl.elaborate
        )
          aggSig

  putStrLn $ "Snarkl / optimised: " ++ show (Set.size constraints)

-- for examing the complexity of expression generated after elaboration
keelungElaborate :: IO ()
keelungElaborate = do
  forM_ [2 :: Int .. 7] $ \i -> run (2 ^ i) 4
  where
    settings :: Settings
    settings =
      Settings
        { enableAggSigChecking = True,
          enableSigSizeChecking = True,
          enableSigLengthChecking = True
        }

    run :: Int -> Int -> IO ()
    run dimension numberOfSignatures = do
      let setup = makeSetup dimension numberOfSignatures 42 settings :: Setup GF181

      let result = Keelung.elaborate (Keelung.aggregateSignature setup)
      case result of
        Left err -> print err
        Right elaborated -> do
          print
            ( Keelung.sizeOfExpr (Keelung.elabExpr elaborated),
              length (Keelung.elabNumAssignments elaborated),
              length (Keelung.elabBoolAssignments elaborated),
              Keelung.elabNumOfVars elaborated
            )
